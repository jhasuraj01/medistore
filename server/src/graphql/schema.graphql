type Query {
  metadata: MetaData!

  # Organization Queries
  # organization: Organization

  # Branch Queries
  branch(organizationId: ID!, branchId: ID!): Branch!
  branches(organizationId: ID!): [Branch!]!
  
  # Item Queries
  item(organizationId: ID!, branchId: ID!, itemId: ID!): Item
  items(organizationId: ID!, branchId: ID!): [Item!]!

  # Item Queries
  bill(organizationId: ID!, branchId: ID!, billId: ID!): Bill
  bills(organizationId: ID!, branchId: ID!): [Bill!]!

  # Current User Queries
  currentUser: CurrentUser!
}

type Mutation {
  setupOrganization(name: String!): SetupOrganizationResponse!

  createBranch(name: String!, organizationId: ID!): Branch!

  addItem(
    organizationId: ID!
    branchId: ID!
    id: ID!
    brandName: StringNonEmpty!
    companyName: StringNonEmpty!
    quantity: IntPositive!
    costPerUnit: FloatNonNegative!
    pricePerUnit: FloatNonNegative!
    discount: Float0To1
    manufactureAt: DatePast!
    expireAt: DateFuture
  ): Boolean
  updateItem(
    organizationId: ID!
    branchId: ID!
    id: ID!
    brandName: StringNonEmpty
    companyName: StringNonEmpty
    quantity: IntPositive
    costPerUnit: FloatNonNegative
    pricePerUnit: FloatNonNegative
    discount: Float0To1
    manufactureAt: DatePast
    expireAt: DateFuture
  ): Boolean
  deleteItem(
    organizationId: ID!
    branchId: ID!
    id: ID!
  ): Boolean
  
  createBill(
    organizationId: ID!
    branchId: ID!
    customerEmail: StringNonEmpty!
    customerPhone: StringNonEmpty!
    customerName: StringNonEmpty!
    items: [itemInput!]!
  ): Bill
}

type MetaData {
  version: String!
  buildAt: String!
  platform: String!
}

type Organization {
  id: ID!
  name: String!
}

type Branch {
  id: ID!
  name: String!
}

type Item {
  organizationId: ID!
  branchId: ID!
  id: ID!
  brandName: StringNonEmpty!
  companyName: StringNonEmpty!
  quantity: IntPositive!
  costPerUnit: FloatNonNegative!
  pricePerUnit: FloatNonNegative!
  discount: Float0To1!
  manufactureAt: DatePast!
  expireAt: DateFuture
}

type Bill {
  organizationId: ID!
  branchId: ID!
  id: ID!
  customerEmail: StringNonEmpty!
  customerPhone: StringNonEmpty!
  customerName: StringNonEmpty!
  costTotal: FloatNonNegative!
  priceTotal: FloatNonNegative!
  profitLoss: Float!
  totalItems: IntPositive!
  items: [Item!]!
  createdAt: Date
}

type CurrentUser {
  organizationId: ID!
  branchId: ID
  privilege: Privilege
}

# Constants
enum Privilege {
  admin
}

# Mutation I/O Types

type SetupOrganizationResponse {
  organizationId: ID!
}

# inputs

input itemInput {
  itemId: ID!
  quantity: IntPositive!
}